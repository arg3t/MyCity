/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.yigitcolakoglu.master_app;
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.io.*;
import java.net.*;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.net.ssl.HttpsURLConnection;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.apache.commons.io.IOUtils;
import org.json.JSONObject;
import java.security.cert.*;
import java.security.*;
import javax.net.ssl.*;
import javax.swing.JSlider;
import org.json.JSONArray;

/**
 *
 * @author yigit
 */
public class cameraForm extends javax.swing.JFrame implements ChangeListener{

    /**
     * Creates new form cameraForm
     */
    public cameraForm() {
        initComponents();
        disableSslVerification();
    }
    private ServerSocket server;
    private Socket client;
    private Thread running = null;
    private Thread moverThread = null;
    private boolean listening = false;
    private String ROBOT_IP = "10.42.0.9";
    private String AI_IP = "10.10.26.161";
    private Socket robotSocket;
    private DataOutputStream out;
    private BufferedReader in;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        intersection_R_3 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        intersection_label = new javax.swing.JLabel();
        ambulance_label = new javax.swing.JLabel();
        fps_label = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ram_usage = new javax.swing.JLabel();
        ram_temp = new javax.swing.JLabel();
        cpu_usage = new javax.swing.JLabel();
        cpu_temp = new javax.swing.JLabel();
        gpu_usage = new javax.swing.JLabel();
        gpu_temp = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        fan_rpm = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        robot_cam_label = new javax.swing.JLabel();
        battery_voltage_label = new javax.swing.JLabel();
        current_drawn_label = new javax.swing.JLabel();
        latitude_label = new javax.swing.JLabel();
        longitude_label = new javax.swing.JLabel();
        robot_stop = new javax.swing.JButton();
        move_robot = new javax.swing.JButton();
        cam_slider = new javax.swing.JSlider();
        ai_checkbox = new javax.swing.JCheckBox();
        forward_button = new javax.swing.JButton();
        back_button = new javax.swing.JButton();
        right_button = new javax.swing.JButton();
        left_button = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        light_1_label = new javax.swing.JLabel();
        light_2_label = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        intersection_1_Y = new javax.swing.JLabel();
        intersection_1_R = new javax.swing.JLabel();
        intersection_1_G = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        intersection_G_2 = new javax.swing.JLabel();
        intersection_2_Y = new javax.swing.JLabel();
        intersection_2_G = new javax.swing.JLabel();
        intersection_2_R = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        intersection_R_3.setBackground(new java.awt.Color(204, 204, 204));
        intersection_R_3.setOpaque(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setToolTipText("");
        jTabbedPane1.setName(""); // NOI18N
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseEntered(evt);
            }
        });

        intersection_label.setAlignmentY(0.0F);
        intersection_label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        ambulance_label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ambulance_label.setName(""); // NOI18N

        fps_label.setText("0 FPS");

        jLabel1.setText("Usage");

        jLabel2.setText("Temparature");

        jLabel3.setText("Memory");

        jLabel4.setText("Processor");

        jLabel5.setText("Video Card");

        ram_usage.setText("10%");

        ram_temp.setText("40C");

        cpu_usage.setText("10%");

        cpu_temp.setText("40C");

        gpu_usage.setText("10%");

        gpu_temp.setText("40C");

        fan_rpm.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        fan_rpm.setText("1000RPM");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cpu_usage)
                            .addComponent(ram_usage)
                            .addComponent(gpu_usage))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ram_temp)
                            .addComponent(cpu_temp)
                            .addComponent(gpu_temp))
                        .addGap(118, 118, 118))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fan_rpm)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(118, 118, 118)
                                .addComponent(jLabel2)))
                        .addGap(80, 80, 80))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel6)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(19, 19, 19)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ram_usage)
                    .addComponent(ram_temp))
                .addGap(36, 36, 36)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cpu_usage)
                    .addComponent(cpu_temp))
                .addGap(35, 35, 35)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(gpu_usage)
                    .addComponent(gpu_temp))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel6))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(fan_rpm)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(intersection_label, javax.swing.GroupLayout.PREFERRED_SIZE, 1024, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(302, 302, 302)
                        .addComponent(fps_label))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ambulance_label, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(intersection_label, javax.swing.GroupLayout.PREFERRED_SIZE, 768, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(ambulance_label, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(fps_label)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Intersection & Ambulance", jPanel5);

        robot_cam_label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        battery_voltage_label.setText("Battery Voltage");

        current_drawn_label.setText("Current Drawn");

        latitude_label.setText("Latitude");

        longitude_label.setText("Longitude");

        robot_stop.setText("Stop Robot");
        robot_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                robot_stopActionPerformed(evt);
            }
        });

        move_robot.setText("Move Robot");
        move_robot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                move_robotActionPerformed(evt);
            }
        });

        cam_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cam_sliderStateChanged(evt);
            }
        });

        ai_checkbox.setText("Send to AI");

        forward_button.setText("∧");
        forward_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                forward_buttonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                forward_buttonMouseReleased(evt);
            }
        });

        back_button.setText("∨");
        back_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                back_buttonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                back_buttonMouseReleased(evt);
            }
        });

        right_button.setText(">");
        right_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                right_buttonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                right_buttonMouseReleased(evt);
            }
        });

        left_button.setText("<");
        left_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                left_buttonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                left_buttonMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(robot_cam_label, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 231, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(battery_voltage_label)
                            .addComponent(current_drawn_label)
                            .addComponent(longitude_label)
                            .addComponent(latitude_label))
                        .addGap(278, 278, 278)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(move_robot)
                                .addComponent(robot_stop))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ai_checkbox)
                                    .addComponent(cam_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(204, 204, 204))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(forward_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(back_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(453, 453, 453))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(left_button)
                        .addGap(64, 64, 64)
                        .addComponent(right_button)
                        .addGap(398, 398, 398))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(robot_cam_label, javax.swing.GroupLayout.PREFERRED_SIZE, 768, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(197, 197, 197)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(battery_voltage_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(current_drawn_label, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addComponent(longitude_label)
                                .addGap(18, 18, 18)
                                .addComponent(latitude_label))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(move_robot)
                                .addGap(18, 18, 18)
                                .addComponent(robot_stop)
                                .addGap(18, 18, 18)
                                .addComponent(cam_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(ai_checkbox)
                        .addGap(121, 121, 121)
                        .addComponent(forward_button)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(right_button)
                            .addComponent(left_button))
                        .addGap(7, 7, 7)
                        .addComponent(back_button)))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Robot", jPanel2);

        light_1_label.setText("Light 1:");

        light_2_label.setText("Light 2: ");

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        intersection_1_Y.setBackground(new java.awt.Color(204, 204, 204));
        intersection_1_Y.setOpaque(true);

        intersection_1_R.setBackground(new java.awt.Color(204, 204, 204));
        intersection_1_R.setOpaque(true);

        intersection_1_G.setBackground(new java.awt.Color(204, 204, 204));
        intersection_1_G.setOpaque(true);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(intersection_1_G, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(intersection_1_Y, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                .addGap(88, 88, 88))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(87, 87, 87)
                    .addComponent(intersection_1_R, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addGap(89, 89, 89)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(272, 272, 272)
                .addComponent(intersection_1_Y, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(intersection_1_G, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(81, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(51, 51, 51)
                    .addComponent(intersection_1_R, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(529, Short.MAX_VALUE)))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.setPreferredSize(new java.awt.Dimension(368, 770));

        intersection_G_2.setBackground(new java.awt.Color(204, 204, 204));
        intersection_G_2.setOpaque(true);

        intersection_2_Y.setBackground(new java.awt.Color(204, 204, 204));
        intersection_2_Y.setOpaque(true);

        intersection_2_G.setBackground(new java.awt.Color(204, 204, 204));
        intersection_2_G.setOpaque(true);

        intersection_2_R.setBackground(new java.awt.Color(204, 204, 204));
        intersection_2_R.setOpaque(true);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(intersection_2_G, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(intersection_2_Y, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addComponent(intersection_2_R, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                .addGap(83, 83, 83))
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(intersection_G_2)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(intersection_2_R, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(intersection_2_Y, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(intersection_2_G, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel7Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(intersection_G_2)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(351, 351, 351)
                        .addComponent(light_1_label)
                        .addGap(711, 711, 711)
                        .addComponent(light_2_label))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(375, 375, 375)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(303, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(light_1_label)
                    .addComponent(light_2_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Traffic Lights", jPanel6);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1622, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 816, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("QR Code", jPanel8);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1624, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 841, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void manage_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manage_buttonActionPerformed
        managementForm settings = new managementForm();
        settings.setVisible(true);
        settings.initIp();
    }//GEN-LAST:event_manage_buttonActionPerformed

    private void ambulance_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ambulance_buttonActionPerformed
        if(running!=null){
            try{
                server.close();
                client.close();
                running.stop();
            }catch(IOException e){
                System.out.println("IO Exception occured");
            }catch(Exception e){
                System.out.println(e.toString());
            }
        }else{
            running = new Thread(() -> {
                try{
                    onCreate(8485,"Ambulance");
                }catch(Exception e){
                    System.out.println(e.toString());
                }
            });
            running.start();
        }
    }//GEN-LAST:event_ambulance_buttonActionPerformed

    private void jTabbedPane1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseEntered
        if(!listening){
            jTabbedPane1.addChangeListener(this);
            System.out.println("Added listener");
            listening = true;
        }
    }//GEN-LAST:event_jTabbedPane1MouseEntered

    private void jTabbedPane1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane1MouseExited

    private void move_robotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_move_robotActionPerformed
        try {
            out.writeUTF("m");
        } catch (IOException ex) {
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_move_robotActionPerformed

    private void robot_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_robot_stopActionPerformed
        try {
            out.writeUTF("s");
        } catch (IOException ex) {
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_robot_stopActionPerformed

    private void cam_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cam_sliderStateChanged
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            source.setValue(50);
        }
        int val = (int)source.getValue();
        if (val < 50) {
            try {
                out.writeUTF("+");
            } catch (IOException ex) {
                System.out.println(ex.toString());
            }
        } else if (val > 50) {
            try {
                out.writeUTF("-");
            } catch (IOException ex) {
                System.out.println(ex.toString());
            }
        }
    }//GEN-LAST:event_cam_sliderStateChanged

    private void forward_buttonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forward_buttonMousePressed
        moverThread = new Thread(() -> {
                try {
                    while (true) {
                        out.writeUTF("f");
                        Thread.sleep(500);
                    }
                } catch(Exception ex){
                    System.out.println(ex.toString());
                }
            });
        moverThread.start();
    }//GEN-LAST:event_forward_buttonMousePressed

    private void forward_buttonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forward_buttonMouseReleased
        moverThread.stop();
    }//GEN-LAST:event_forward_buttonMouseReleased

    private void right_buttonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_right_buttonMousePressed
        moverThread = new Thread(() -> {
                try {
                    while (true) {
                        out.writeUTF("r");
                        Thread.sleep(500);
                    }
                } catch(Exception ex){
                    System.out.println(ex.toString());
                }
            });
        moverThread.start();
    }//GEN-LAST:event_right_buttonMousePressed

    private void right_buttonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_right_buttonMouseReleased
        moverThread.stop();
    }//GEN-LAST:event_right_buttonMouseReleased

    private void back_buttonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_back_buttonMousePressed
        moverThread = new Thread(() -> {
                try {
                    while (true) {
                        out.writeUTF("b");
                        Thread.sleep(500);
                    }
                } catch(Exception ex){
                    System.out.println(ex.toString());
                }
            });
        moverThread.start();
    }//GEN-LAST:event_back_buttonMousePressed

    private void back_buttonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_back_buttonMouseReleased
        moverThread.stop();
    }//GEN-LAST:event_back_buttonMouseReleased

    private void left_buttonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_left_buttonMousePressed
        moverThread = new Thread(() -> {
                try {
                    while (true) {
                        out.writeUTF("l");
                        Thread.sleep(500);
                    }
                } catch(Exception ex){
                    System.out.println(ex.toString());
                }
            });
        moverThread.start();
    }//GEN-LAST:event_left_buttonMousePressed

    private void left_buttonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_left_buttonMouseReleased
       moverThread.stop();
    }//GEN-LAST:event_left_buttonMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cameraForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cameraForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cameraForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cameraForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        System.out.println("Reading: ");

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new cameraForm().setVisible(true);

        }});
    }
    private static void disableSslVerification() {
        try
        {
            // Create a trust manager that does not validate certificate chains
            TrustManager[] trustAllCerts = new TrustManager[] {new X509TrustManager() {
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }
                public void checkClientTrusted(X509Certificate[] certs, String authType) {
                }
                public void checkServerTrusted(X509Certificate[] certs, String authType) {
                }
            }
            };

            // Install the all-trusting trust manager
            SSLContext sc = SSLContext.getInstance("SSL");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            // Create all-trusting host name verifier
            HostnameVerifier allHostsValid = new HostnameVerifier() {
                public boolean verify(String hostname, SSLSession session) {
                    return true;
                }
            };

            // Install the all-trusting host verifier
            HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private static String encodeValue(String value) {
        try {
            return URLEncoder.encode(value, StandardCharsets.UTF_8.toString());
        } catch (UnsupportedEncodingException ex) {
            throw new RuntimeException(ex.getCause());
        }
    }
    public void onCreate(int port, String name) throws Exception{
        boolean run = true;
        if (name.equals("robot")) {
            robotSocket = new Socket(ROBOT_IP, 3131);
            robotSocket.setSoTimeout(1000);
            out = new DataOutputStream(robotSocket.getOutputStream());
            in = new BufferedReader(new InputStreamReader(robotSocket.getInputStream()));
            while (run) {
                out.writeUTF("i");
                String resp;
                try {
                    resp = in.readLine();
                } catch  (SocketTimeoutException ex) {
                    resp = "{\"battery_voltage\":\"TIMEOUT\",\"current_drawn\":\"TIMEOUT\",\"lat\":\"TIMEOUT\",\"lng\":\"TIMEOUT\"}";
                }
                JSONObject values = new JSONObject(resp);
                latitude_label.setText("Latitude: " + values.get("lat"));
                longitude_label.setText("Longitude: " + values.get("lng"));
                battery_voltage_label.setText("Battery Voltage: " + values.get("battery_voltage"));
                current_drawn_label.setText("Current Drawn: " + values.get("current_drawn"));
                
                BufferedImage image;
                URL img_url = new URL(String.format("http://%s:8080/?action=snapshot", ROBOT_IP));
                image = ImageIO.read(img_url);
                int width = image.getWidth();
                int height = image.getHeight();
                BufferedImage dest = new BufferedImage(height, width, image.getType());
                Graphics2D graphics2D = dest.createGraphics();
                graphics2D.translate((height - width) / 2, (height - width) / 2);
                graphics2D.rotate(Math.PI / 2, height / 2, width / 2);
                graphics2D.drawRenderedImage(image, null);
                dest = resizeImage(dest,576,768);
                width = dest.getWidth();
                height = dest.getHeight();
                // robot_cam_label.setIcon(new ImageIcon(dest));
                if (ai_checkbox.isSelected()) {
                    URL obj = new URL(String.format("https://%s:5001/ai", AI_IP));
                    HttpsURLConnection con = (HttpsURLConnection) obj.openConnection();

                    con.setRequestMethod("POST");
                    ByteArrayOutputStream out = new ByteArrayOutputStream();
                    ImageIO.write(dest, "PNG", out);
                    byte[] bytes = out.toByteArray();
                    String base64 = Base64.getEncoder().encodeToString(bytes);
                    String params = "type=damage&img=" + encodeValue(base64);

                    con.setDoOutput(true);
                    DataOutputStream wr = new DataOutputStream(con.getOutputStream());
                    wr.writeBytes(params);
                    wr.flush();
                    wr.close();

                    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
                    String inputLine;
                    StringBuffer response = new StringBuffer();

                    while ((inputLine = in.readLine()) != null) {
                        response.append(inputLine);
                    }
                    in.close();
                    JSONObject json = new JSONObject(response.toString());
                    JSONArray detection_classes = json.getJSONArray("detection_classes");
                    System.out.println(detection_classes);
                    JSONArray detection_scores = json.getJSONArray("detection_scores");
                    System.out.println(detection_scores);
                    JSONArray detection_boxes = json.getJSONArray("detection_boxes");
                    Graphics2D graph = dest.createGraphics();
                    graph.setColor(Color.RED);
                    graph.setStroke(new BasicStroke(10));
                    graph.setFont(new Font("Arial Black", Font.BOLD, 20));
                    for (int i = 0; i < detection_scores.length(); i++) {
                        if (detection_scores.getDouble(i) < 0.4) {
                            continue;
                        }

                        JSONArray box = detection_boxes.getJSONArray(i);
                        int left = (int)(box.getDouble(1) * width);
                        int right = (int)(box.getDouble(3) * width);
                        int top = (int)(box.getDouble(0) * height);
                        int bottom = (int)(box.getDouble(2) * height);
                        graph.setColor(Color.RED);
                        graph.drawRect(left, top, right - left, bottom - top);
                        graph.setColor(Color.BLUE);
                        graph.drawString(Integer.toString((int)(detection_scores.getDouble(i) * 100)) + "%", left, top - 5);
                    }
                }
                robot_cam_label.setIcon(new ImageIcon(dest));
            }
            return;
        }
        this.ambulance_label.setIcon(new ImageIcon());
        this.intersection_label.setIcon(new ImageIcon());
        String fromClient = "";
        String toClient;

        server = new ServerSocket(port);
        System.out.println("wait for connection on port " + port);
        jTabbedPane1.addChangeListener(this);
        client = server.accept();
        System.out.println("got connection on port " + port);
        BufferedImage image = null;
        byte[] imageByte;
        int null_reps = 0;
        int fps_sum = 0;
        int reps = 0;
        if(name.equals("cams")){
            while(run) {
                try{
                    long start = System.currentTimeMillis();
                    BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));

                    fromClient = in.readLine();

                    if(fromClient != null) {
                        if(fromClient.trim().equals("Bye")) {
                            run = false;
                            System.out.println("socket closed");
                        }else{
                            System.out.println("received data in size: " + fromClient.length());
                            JSONObject json = new JSONObject(fromClient);
                            byte[] decodedBytes = Base64.getDecoder().decode(json.getString("image_full"));
                            ByteArrayInputStream bis = new ByteArrayInputStream(decodedBytes);
                            image = ImageIO.read(bis);
                            bis.close();
                            JSONObject dims = json.getJSONObject("image_sizes");
                            this.intersection_label.setIcon(new ImageIcon(resizeImage(image,1280,720)));
                            this.ambulance_label.setIcon(new ImageIcon(resizeImage(image.getSubimage(dims.getInt("x"), dims.getInt("y"), dims.getInt("width"), dims.getInt("height")),300,300)));
                            JSONObject data = json.optJSONObject("load");
                            this.gpu_temp.setText(data.getString("gpu_temp"));
                            this.gpu_usage.setText(data.getString("gpu_load"));
                            this.cpu_temp.setText(data.getString("cpu_temp"));
                            this.cpu_usage.setText(data.getString("cpu_load"));
                            this.ram_temp.setText(data.getString("mem_temp"));
                            this.ram_usage.setText(data.getString("mem_load"));
                            this.fan_rpm.setText(data.getString("fan_speed"));
                            null_reps=0;
                            long end = System.currentTimeMillis();
                            float sec = (end - start) / 1000F;
                            fps_sum += Math.round(1/sec);
                            reps+=1;
                            if(reps%10==0){
                                this.fps_label.setText(fps_sum/10 + " FPS");
                                fps_sum=0;
                            }
                        }
                    }else{
                        null_reps +=1;
                    }
                }
                catch(Exception e){
                    System.out.println(fromClient);
                    System.out.println(e.toString());
                    null_reps+=1;
                 }
                if (null_reps >= 1000000000){
                    run = false;
                    System.out.println("socket closed");
                }
            }
            server.close();
            client.close();
            this.ambulance_label.setIcon(new ImageIcon());
            this.intersection_label.setIcon(new ImageIcon());
            JOptionPane.showMessageDialog(this, name +" socket server down!");
            running.stop();
        }else if(name.equals("lights")){
            int[][] colors = {{204,0,0},{204,204,0},{0,204,0}};
            javax.swing.JLabel[][] labels = {{intersection_1_R,intersection_1_Y,intersection_1_G},{intersection_2_R,intersection_2_Y,intersection_2_G}};
            int[] lights = {0,0};
            while(run) {
                BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));

                fromClient = in.readLine();

                if(fromClient != null) {
                    if(fromClient.trim().equals("Bye")) {
                        run = false;
                        System.out.println("socket closed");
                    }else{
                        System.out.println("received data in size: " + fromClient.length());
                        System.out.println(fromClient);
                        lights[0] = Character.getNumericValue(fromClient.charAt(0));
                        lights[1] = Character.getNumericValue(fromClient.charAt(2));
                        for(int i = 0;i < 2;i++){
                            for(int j = 0;j<3;j++){
                                if(lights[i] == j){
                                    labels[i][j].setBackground(new java.awt.Color(colors[j][0], colors[j][1], colors[j][2]));
                                    continue;
                                }
                                labels[i][j].setBackground(new java.awt.Color(204,204,204));
                            }
                        }
                    }
                }
            }
        }
    }

    public static BufferedImage resizeImage(final Image image, int width, int height) {
        final BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        final Graphics2D graphics2D = bufferedImage.createGraphics();
        graphics2D.setComposite(AlphaComposite.Src);
        //below three lines are for RenderingHints for better image quality at cost of higher processing time
        graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        graphics2D.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
        graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
        graphics2D.drawImage(image, 0, 0, width, height, null);
        graphics2D.dispose();
        return bufferedImage;
    }
    @Override
    public void stateChanged(ChangeEvent e){
        System.out.println("Tab: " + jTabbedPane1.getSelectedIndex());
        if(running!=null){
           try{
                server.close();
                        client.close();
                        running.stop();
                    }catch(IOException ex){
                        System.out.println("IO Exception occured");
                    }catch(Exception ex){
                        System.out.println(ex.toString());
                    }
        }
        switch (jTabbedPane1.getSelectedIndex()) {
            case 0:
                running = new Thread(() -> {
                try{
                    onCreate(8485,"cams");
                }catch(Exception ex){
                    System.out.println(ex.toString());
                }
            });
            running.start();
            break;
            case 2:
                running = new Thread(() -> {
                try{
                    onCreate(69,"lights");
                }catch(Exception ex){
                    System.out.println(ex.toString());
                }
                });
                running.start();
            break;
            case 1:
                running = new Thread(() -> {
                try{
                    onCreate(0,"robot");
                }catch(Exception ex){
                    System.out.println(ex.toString());
                }
                });
                running.start();
            break;
        }
            
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ai_checkbox;
    private javax.swing.JLabel ambulance_label;
    private javax.swing.JButton back_button;
    private javax.swing.JLabel battery_voltage_label;
    private javax.swing.JSlider cam_slider;
    private javax.swing.JLabel cpu_temp;
    private javax.swing.JLabel cpu_usage;
    private javax.swing.JLabel current_drawn_label;
    private javax.swing.JLabel fan_rpm;
    private javax.swing.JButton forward_button;
    private javax.swing.JLabel fps_label;
    private javax.swing.JLabel gpu_temp;
    private javax.swing.JLabel gpu_usage;
    private javax.swing.JLabel intersection_1_G;
    private javax.swing.JLabel intersection_1_R;
    private javax.swing.JLabel intersection_1_Y;
    private javax.swing.JLabel intersection_2_G;
    private javax.swing.JLabel intersection_2_R;
    private javax.swing.JLabel intersection_2_Y;
    private javax.swing.JLabel intersection_G_2;
    private javax.swing.JLabel intersection_R_3;
    private javax.swing.JLabel intersection_label;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel latitude_label;
    private javax.swing.JButton left_button;
    private javax.swing.JLabel light_1_label;
    private javax.swing.JLabel light_2_label;
    private javax.swing.JLabel longitude_label;
    private javax.swing.JButton move_robot;
    private javax.swing.JLabel ram_temp;
    private javax.swing.JLabel ram_usage;
    private javax.swing.JButton right_button;
    private javax.swing.JLabel robot_cam_label;
    private javax.swing.JButton robot_stop;
    // End of variables declaration//GEN-END:variables


}
