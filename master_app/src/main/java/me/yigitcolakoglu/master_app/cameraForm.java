/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package me.yigitcolakoglu.master_app;
import java.awt.AlphaComposite;
import java.io.*;
import java.net.*;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.util.Base64;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.json.JSONObject;

/**
 *
 * @author yigit
 */
public class cameraForm extends javax.swing.JFrame implements ChangeListener{

    /**
     * Creates new form cameraForm
     */
    public cameraForm() {
        initComponents();
        initialize();
    }
    private ServerSocket server;
    private Socket client;
    private Thread running = null;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        intersection_label = new javax.swing.JLabel();
        ambulance_label = new javax.swing.JLabel();
        fps_label = new javax.swing.JLabel();
        manage_button = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setToolTipText("");
        jTabbedPane1.setName(""); // NOI18N
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseExited(evt);
            }
        });

        intersection_label.setAlignmentY(0.0F);

        ambulance_label.setName(""); // NOI18N

        fps_label.setText("0 FPS");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(intersection_label, javax.swing.GroupLayout.PREFERRED_SIZE, 1024, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addComponent(ambulance_label, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(204, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fps_label)
                        .addGap(168, 168, 168))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(fps_label)
                        .addGap(88, 88, 88)
                        .addComponent(ambulance_label, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(intersection_label, javax.swing.GroupLayout.PREFERRED_SIZE, 768, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(181, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Intersection & Ambulance", jPanel5);

        light_1_label.setText("Light 1:");

        light_2_label.setText("Light 2: ");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(light_1_label)
                    .addComponent(light_2_label))
                .addContainerGap(1624, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(light_1_label)
                .addGap(18, 18, 18)
                .addComponent(light_2_label)
                .addContainerGap(918, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Traffic Lights", jPanel6);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1693, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 978, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Loads", jPanel7);

        jLabel8.setText("deneme");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(493, 493, 493)
                .addComponent(jLabel8)
                .addContainerGap(1074, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(jLabel8)
                .addContainerGap(686, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab2", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1624, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 841, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void initialize() {
        jTabbedPane1.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                System.out.println("Tab: " + jTabbedPane1.getSelectedIndex());
                if(running!=null){
                    try{
                        server.close();
                        client.close();
                        running.stop();
                    }catch(IOException ex){
                        System.out.println("IO Exception occured");
                    }catch(Exception ex){
                        System.out.println(e.toString());
                    }
                }
                switch (jTabbedPane1.getSelectedIndex()) {
                    case 0:
                        running = new Thread(() -> {
                            try{
                                onCreate(8485,"cams");
                            }catch(Exception ex){
                                System.out.println(e.toString());
                            }
                        });
                        running.start();
                        break;
                    case 1:
                        running = new Thread(() -> {
                            try{
                                onCreate(8484,"lights");
                            }catch(Exception ex){
                                System.out.println(e.toString());
                            }
                        });
                        running.start();
                        break;
                    case 2:
                        running = new Thread(() -> {
                            try{
                                onCreate(8483,"Loads");
                            }catch(Exception ex){
                                System.out.println(e.toString());
                            }
                        });
                        running.start();
                        break;
                }
            }
        });
    }
    
    private void jTabbedPane1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane1MouseExited

    private void jTabbedPane1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseEntered

    }//GEN-LAST:event_jTabbedPane1MouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cameraForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cameraForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cameraForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cameraForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        System.out.println("Reading: ");

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cameraForm().setVisible(true);

        }});
    }

    public void onCreate(int port, String name) throws Exception{
        boolean run = true;
        if ("lights".equals(name)) {
            Socket clientSocket = new Socket("192.168.2.174",69);
            int c;
            InputStream in = clientSocket.getInputStream();
            String message = "";
            while((c=in.read()) != -1){
                if (c == 10 || c == 13) {
                    break;
                }
                message += (char) c;
            }
            
            this.light_1_label.setText("Light 1: " + message.charAt(0));
            this.light_2_label.setText("Light 2: " + message.charAt(2));
            
            System.out.println(message);
            return;
        }
        this.intersection_label.setIcon(new ImageIcon());
        this.ambulance_label.setIcon(new ImageIcon());
        String fromClient = "";
        String toClient;

        server = new ServerSocket(port);
        System.out.println("wait for connection on port " + port);
        client = server.accept();
        System.out.println("got connection on port " + port);
        BufferedImage image = null;
        byte[] imageByte;
        int null_reps = 0;
        int fps_sum = 0;
        int reps = 0;
        while(run) {
            try{
                long start = System.currentTimeMillis();
                BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));

                fromClient = in.readLine();

                if(fromClient != null) {
                    if(fromClient.trim().equals("Bye")) {
                        run = false;
                        System.out.println("socket closed");
                    }else{
                        System.out.println("received data in size: " + fromClient.length());
                        JSONObject json = new JSONObject(fromClient);
                        byte[] decodedBytes = Base64.getDecoder().decode(json.getString("image_full"));
                        ByteArrayInputStream bis = new ByteArrayInputStream(decodedBytes);
                        image = ImageIO.read(bis);
                        bis.close();
                        if ("cams".equals(name)) {
                            this.intersection_label.setIcon(new ImageIcon(resizeImage(image,1024, 768)));
                            JSONObject dims = json.getJSONObject("image_sizes");
                            this.ambulance_label.setIcon(new ImageIcon(resizeImage(image.getSubimage(dims.getInt("x"), dims.getInt("y"), dims.getInt("width"), dims.getInt("height")),250,280)));
                        } else if ("Loads".equals(name)) {
                            JSONObject data = json.optJSONObject("load");
                            /*this.gpu_temp.setText(data.getString("gpu_temp"));
                            this.gpu_usage.setText(daqqta.getString("gpu_load"));
                            this.cpu_temp.setText(data.getString("cpu_temp"));
                            this.cpu_usage.setText(data.getString("cpu_load"));
                            this.ram_temp.setText(data.getString("mem_temp"));
                            this.ram_usage.setText(data.getString("mem_load"));
                            this.fan_rpm.setText(data.getString("fan_speed"));*/
                        }

                        null_reps=0;
                        long end = System.currentTimeMillis();
                        float sec = (end - start) / 1000F;
                        fps_sum += Math.round(1/sec);
                        reps+=1;
                        if(reps%10==0){
                            this.fps_label.setText(fps_sum/10 + " FPS");
                            fps_sum=0;
                        }
                    }
                }else{
                    null_reps +=1;
                }
            }
            catch(Exception e){
                System.out.println(fromClient);
                System.out.println(e.toString());
                null_reps+=1;
             }
            if (null_reps >= 1000000000){
                run = false;
                System.out.println("socket closed");
            }
        }
        server.close();
        client.close();
        this.ambulance_label.setIcon(new ImageIcon());
        this.intersection_label.setIcon(new ImageIcon());
        JOptionPane.showMessageDialog(this, name +" socket server down!");
        running.stop();

    }

    public static BufferedImage resizeImage(final Image image, int width, int height) {
        final BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        final Graphics2D graphics2D = bufferedImage.createGraphics();
        graphics2D.setComposite(AlphaComposite.Src);
        //below three lines are for RenderingHints for better image quality at cost of higher processing time
        graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        graphics2D.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
        graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
        graphics2D.drawImage(image, 0, 0, width, height, null);
        graphics2D.dispose();
        return bufferedImage;
    }
    @Override
    public void stateChanged(ChangeEvent changeEvent){
        System.out.println("TEST");
        JTabbedPane sourceTabbedPane = (JTabbedPane) changeEvent.getSource();
        int index = sourceTabbedPane.getSelectedIndex();
        System.out.println("Tab changed to: " + sourceTabbedPane.getTitleAt(index));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ambulance_label;
    private javax.swing.JLabel fps_label;
    private javax.swing.JLabel gpu_temp;
    private javax.swing.JLabel gpu_usage;
    private javax.swing.JButton intersection_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel light_1_label;
    private javax.swing.JLabel light_2_label;
    // End of variables declaration//GEN-END:variables


}
